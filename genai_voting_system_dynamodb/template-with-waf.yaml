AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: GenAI Voting System with DynamoDB and WAF Protection

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  # WAF Web ACL for API Gateway Protection
  ApiGatewayWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${Environment}-genai-voting-waf"
      Description: WAF for GenAI Voting System API Gateway
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      Rules:
        # Rate limiting rule
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000  # requests per 5-minute window per IP
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
        
        # AWS Managed Rules - Core Rule Set
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRuleSetMetric
        
        # AWS Managed Rules - Known Bad Inputs
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: KnownBadInputsMetric
        
        # AWS Managed Rules - SQL Injection
        - Name: AWSManagedRulesSQLiRuleSet
          Priority: 4
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: SQLiRuleSetMetric

      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${Environment}-genai-voting-waf"

  # Associate WAF with API Gateway
  ApiGatewayWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${ServerlessRestApi}/stages/Prod"
      WebACLArn: !GetAtt ApiGatewayWebACL.Arn
    DependsOn:
      - ServerlessRestApi
      - ServerlessRestApiProdStage

  # DynamoDB Tables (existing)
  TeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-genai-voting-teams"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  JudgesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-genai-voting-judges"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  VotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-genai-voting-votes"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: team_id
          AttributeType: S
        - AttributeName: judge_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: team-index
          KeySchema:
            - AttributeName: team_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: judge-index
          KeySchema:
            - AttributeName: judge_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  CriteriaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-genai-voting-criteria"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-genai-voting-settings"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH

  # Lambda Function (existing)
  VotingSystemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app_dynamodb.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          TEAMS_TABLE: !Ref TeamsTable
          JUDGES_TABLE: !Ref JudgesTable
          VOTES_TABLE: !Ref VotesTable
          CRITERIA_TABLE: !Ref CriteriaTable
          SETTINGS_TABLE: !Ref SettingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TeamsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JudgesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VotesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CriteriaTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
        - SESCrudPolicy:
            IdentityName: "*"
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        RootPath:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # S3 Bucket for demo files (existing)
  DemoFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-genai-voting-demos-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"

  # CloudWatch Dashboard for WAF Monitoring
  WAFDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${Environment}-genai-voting-waf-dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/WAFV2", "AllowedRequests", "WebACL", "${ApiGatewayWebACL}", "Region", "${AWS::Region}", "Rule", "ALL" ],
                  [ ".", "BlockedRequests", ".", ".", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "WAF Requests"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/WAFV2", "BlockedRequests", "WebACL", "${ApiGatewayWebACL}", "Region", "${AWS::Region}", "Rule", "RateLimitRule" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Rate Limited Requests"
              }
            }
          ]
        }

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  WebACLArn:
    Description: WAF Web ACL ARN
    Value: !GetAtt ApiGatewayWebACL.Arn
  
  WebACLId:
    Description: WAF Web ACL ID
    Value: !Ref ApiGatewayWebACL
  
  TeamsTableName:
    Description: DynamoDB Teams Table
    Value: !Ref TeamsTable
  
  JudgesTableName:
    Description: DynamoDB Judges Table
    Value: !Ref JudgesTable
  
  VotesTableName:
    Description: DynamoDB Votes Table
    Value: !Ref VotesTable
  
  S3BucketName:
    Description: S3 Bucket for demos
    Value: !Ref DemoFilesBucket
