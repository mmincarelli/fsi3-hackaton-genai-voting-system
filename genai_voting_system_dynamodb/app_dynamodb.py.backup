


def serve_main_page():
    """Serve a simple working HTML interface"""
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'text/html',
            **get_security_headers()
        },
        'body': '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GenAI Voting System - DynamoDB</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="hero-section bg-primary text-white p-4 rounded mb-4">
            <h1 class="display-4"><i class="fas fa-trophy me-3"></i>GenAI Voting System</h1>
            <p class="lead">DynamoDB Version - Persistent Storage</p>
            <span class="badge bg-success fs-6"><i class="fas fa-database me-1"></i>Persistent</span>
            <span class="badge bg-info fs-6 ms-2"><i class="fas fa-sync me-1"></i>Real-time</span>
        </div>
        
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h5><i class="fas fa-chart-bar me-2"></i>System Status</h5>
                    </div>
                    <div class="card-body">
                        <div id="status-content">Loading...</div>
                        <button class="btn btn-primary mt-3" onclick="loadStatus()">
                            <i class="fas fa-sync me-1"></i>Refresh Status
                        </button>
                    </div>
                </div>
                
                <div class="card mt-4">
                    <div class="card-header bg-info text-white">
                        <h5><i class="fas fa-trophy me-2"></i>Leaderboard</h5>
                    </div>
                    <div class="card-body">
                        <div id="leaderboard-content">Loading...</div>
                        <button class="btn btn-success mt-3" onclick="loadLeaderboard()">
                            <i class="fas fa-trophy me-1"></i>Load Leaderboard
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h6><i class="fas fa-plus me-2"></i>Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" onclick="showAddTeam()">
                                <i class="fas fa-users me-1"></i>Add Team
                            </button>
                            <button class="btn btn-info" onclick="showAddJudge()">
                                <i class="fas fa-user-tie me-1"></i>Add Judge
                            </button>
                            <button class="btn btn-warning" onclick="clearData()">
                                <i class="fas fa-trash me-1"></i>Clear All Data
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card mt-3">
                    <div class="card-header bg-secondary text-white">
                        <h6><i class="fas fa-link me-2"></i>API Endpoints</h6>
                    </div>
                    <div class="card-body small">
                        <div class="mb-2">
                            <a href="/api/teams" class="btn btn-sm btn-outline-primary">Teams</a>
                            <a href="/api/judges" class="btn btn-sm btn-outline-info">Judges</a>
                        </div>
                        <div class="mb-2">
                            <a href="/api/leaderboard" class="btn btn-sm btn-outline-success">Leaderboard</a>
                            <a href="/api/debug-db" class="btn btn-sm btn-outline-secondary">Debug</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Add Team Modal -->
        <div class="modal fade" id="addTeamModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Team</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="teamForm">
                            <div class="mb-3">
                                <label class="form-label">Team Name *</label>
                                <input type="text" class="form-control" id="teamName" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" id="teamDesc" rows="3"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="addTeam()">Add Team</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Add Judge Modal -->
        <div class="modal fade" id="addJudgeModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Judge</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="judgeForm">
                            <div class="mb-3">
                                <label class="form-label">Judge Name *</label>
                                <input type="text" class="form-control" id="judgeName" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email *</label>
                                <input type="email" class="form-control" id="judgeEmail" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Role</label>
                                <input type="text" class="form-control" id="judgeRole">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-info" onclick="addJudge()">Add Judge</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        async function apiCall(endpoint, options = {}) {
            const url = endpoint.startsWith('/') ? `/api${endpoint}` : `/api/${endpoint}`;
            const response = await fetch(url, {
                headers: { 'Content-Type': 'application/json', ...options.headers },
                ...options
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        }
        
        async function loadStatus() {
            try {
                const data = await apiCall('/debug-db');
                const counts = data.counts;
                document.getElementById('status-content').innerHTML = `
                    <div class="row text-center">
                        <div class="col-3"><div class="badge bg-primary fs-6">${counts.teams}</div><div class="small">Teams</div></div>
                        <div class="col-3"><div class="badge bg-info fs-6">${counts.judges}</div><div class="small">Judges</div></div>
                        <div class="col-3"><div class="badge bg-success fs-6">${counts.votes}</div><div class="small">Votes</div></div>
                        <div class="col-3"><div class="badge bg-warning fs-6">${counts.criteria}</div><div class="small">Criteria</div></div>
                    </div>
                    <div class="mt-3 text-center">
                        <span class="badge bg-success"><i class="fas fa-database me-1"></i>DynamoDB Active</span>
                    </div>
                `;
            } catch (error) {
                document.getElementById('status-content').innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            }
        }
        
        async function loadLeaderboard() {
            try {
                const leaderboard = await apiCall('/leaderboard');
                if (leaderboard.length === 0) {
                    document.getElementById('leaderboard-content').innerHTML = '<div class="alert alert-info">No votes yet!</div>';
                    return;
                }
                
                let html = '<div class="table-responsive"><table class="table table-striped"><thead><tr><th>Rank</th><th>Team</th><th>Score</th><th>Votes</th></tr></thead><tbody>';
                leaderboard.forEach((team, index) => {
                    html += `<tr><td>${index + 1}</td><td>${team.team_name}</td><td><span class="badge bg-success">${team.total_score.toFixed(1)}</span></td><td>${team.vote_count}</td></tr>`;
                });
                html += '</tbody></table></div>';
                document.getElementById('leaderboard-content').innerHTML = html;
            } catch (error) {
                document.getElementById('leaderboard-content').innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            }
        }
        
        function showAddTeam() {
            new bootstrap.Modal(document.getElementById('addTeamModal')).show();
        }
        
        function showAddJudge() {
            new bootstrap.Modal(document.getElementById('addJudgeModal')).show();
        }
        
        async function addTeam() {
            const name = document.getElementById('teamName').value.trim();
            const description = document.getElementById('teamDesc').value.trim();
            if (!name) { alert('Team name is required!'); return; }
            
            try {
                await apiCall('/teams', { method: 'POST', body: JSON.stringify({ name, description }) });
                alert('Team added successfully!');
                bootstrap.Modal.getInstance(document.getElementById('addTeamModal')).hide();
                document.getElementById('teamForm').reset();
                loadStatus();
            } catch (error) {
                alert('Error adding team: ' + error.message);
            }
        }
        
        async function addJudge() {
            const name = document.getElementById('judgeName').value.trim();
            const email = document.getElementById('judgeEmail').value.trim();
            const role = document.getElementById('judgeRole').value.trim();
            if (!name || !email) { alert('Name and email are required!'); return; }
            
            try {
                await apiCall('/judges', { method: 'POST', body: JSON.stringify({ name, email, role }) });
                alert('Judge added successfully!');
                bootstrap.Modal.getInstance(document.getElementById('addJudgeModal')).hide();
                document.getElementById('judgeForm').reset();
                loadStatus();
            } catch (error) {
                alert('Error adding judge: ' + error.message);
            }
        }
        
        async function clearData() {
            if (!confirm('Delete ALL data? This cannot be undone!')) return;
            if (!confirm('Final warning: ALL DATA will be permanently deleted!')) return;
            
            try {
                const result = await apiCall('/clear-sample-data', { method: 'POST' });
                alert(`Success! Deleted ${result.deleted_teams} teams, ${result.deleted_judges} judges, ${result.deleted_votes} votes.`);
                loadStatus();
                loadLeaderboard();
            } catch (error) {
                alert('Error clearing data: ' + error.message);
            }
        }
        
        // Load initial data
        document.addEventListener('DOMContentLoaded', function() {
            loadStatus();
            loadLeaderboard();
        });
    </script>
</body>
</html>'''
    }
